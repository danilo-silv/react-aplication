{"version":3,"sources":["services/api.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","products","productsInfo","page","loadProducts","a","get","response","data","docs","setState","prevPage","pageNumber","nextPage","this","className","map","product","key","_id","title","description","to","disabled","onClick","pages","Component","Product","id","props","match","params","console","log","href","url","Routes","exact","path","component","Header","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0WAKeA,E,OAHHC,EAAMC,OAAO,CAAEC,QAAS,8CCKfC,G,iNAEjBC,MAAQ,CACJC,SAAU,GACVC,aAAc,GACdC,KAAM,G,EAMVC,a,sBAAe,gDAAAC,EAAA,6DAAOF,EAAP,+BAAc,EAAd,SACYR,EAAIW,IAAJ,yBAA0BH,IADtC,OACLI,EADK,SAEuBA,EAASC,KAAnCC,EAFG,EAEHA,KAASP,EAFN,wBAGX,EAAKQ,SAAS,CAAET,SAAUQ,EAAMP,eAAcC,SAHnC,2C,EAMfQ,SAAW,WAAO,IACNR,EAAS,EAAKH,MAAdG,KACR,GAAa,IAATA,EAAJ,CAEA,IAAMS,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,EAEtBC,SAAW,WAAO,IAAD,EACkB,EAAKb,MAA5BG,EADK,EACLA,KACR,GAAIA,IAFS,EACCD,aACd,CAEA,IAAMU,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,mFAvBlBE,KAAKV,iB,+BA0BC,IAAD,EACoCU,KAAKd,MAAtCC,EADH,EACGA,SAAUE,EADb,EACaA,KAAMD,EADnB,EACmBA,aACxB,OACI,yBAAKa,UAAU,gBACVd,EAASe,KAAI,SAAAC,GAAO,OACjB,6BAASC,IAAKD,EAAQE,KAClB,gCAASF,EAAQG,OACjB,2BAAIH,EAAQI,aAGZ,kBAAC,IAAD,CAAMC,GAAE,oBAAeL,EAAQE,MAA/B,eAGR,yBAAKJ,UAAU,WACX,4BAAQQ,SAAmB,IAATpB,EAAYqB,QAASV,KAAKH,UAA5C,YACA,4BAAQY,SAAUpB,IAASD,EAAauB,MAAOD,QAASV,KAAKD,UAA7D,oB,GAjDca,cCHbC,G,iNACjB3B,MAAQ,CACJiB,QAAS,I,4MAGDW,EAAOd,KAAKe,MAAMC,MAAMC,OAAxBH,G,SACejC,EAAIW,IAAJ,oBAAqBsB,I,OAAtCrB,E,OACNyB,QAAQC,IAAI1B,EAASC,MACrBM,KAAKJ,SAAS,CAAEO,QAASV,EAASC,O,qIAE5B,IACES,EAAYH,KAAKd,MAAjBiB,QAER,OACI,yBAAKF,UAAU,gBACX,4BAAKE,EAAQG,OACb,2BAAIH,EAAQI,aACZ,mCACS,uBAAGa,KAAMjB,EAAQkB,KAAMlB,EAAQkB,W,GAlBnBT,cCatBU,EAVA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjC,kBAAC,IAAD,CAAOuC,KAAK,gBAAgBC,UAAWZ,OCLpCa,G,YAFA,kBAAM,4BAAQZ,GAAG,eAAX,cCUNa,EAPH,kBACV,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCbNgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e913ed9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios.create({ baseURL: 'https://rocketseat-node.herokuapp.com/api' });\r\n\r\n\r\nexport default api;","import React, { Component } from \"react\";\r\nimport api from \"../../services/api\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport \"./style.css\";\r\n\r\n\r\nexport default class Main extends Component {\r\n\r\n    state = {\r\n        products: [],\r\n        productsInfo: {},\r\n        page: 1,\r\n    }\r\n    componentDidMount() {\r\n        this.loadProducts();\r\n    };\r\n\r\n    loadProducts = async (page = 1) => {\r\n        const response = await api.get(`/products?page=${page}`);\r\n        const { docs, ...productsInfo } = response.data;\r\n        this.setState({ products: docs, productsInfo, page });\r\n    };\r\n\r\n    prevPage = () => {\r\n        const { page } = this.state;\r\n        if (page === 1) return;\r\n\r\n        const pageNumber = page - 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n    nextPage = () => {\r\n        const { page, productsInfo } = this.state;\r\n        if (page === productsInfo) return;\r\n\r\n        const pageNumber = page + 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    render() {\r\n        const { products, page, productsInfo } = this.state;\r\n        return (\r\n            <div className=\"product-list\">\r\n                {products.map(product => (\r\n                    <article key={product._id}>\r\n                        <strong>{product.title}</strong>\r\n                        <p>{product.description}</p>\r\n\r\n\r\n                        <Link to={`/products/${product._id}`}>Acessar</Link>\r\n                    </article>\r\n                ))}\r\n                <div className=\"actions\">\r\n                    <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\r\n                    <button disabled={page === productsInfo.pages} onClick={this.nextPage}>Pr√≥ximo</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n};","import React, { Component } from \"react\";\r\nimport api from \"../../services/api\"\r\nimport \"./style.css\";\r\n\r\nexport default class Product extends Component {\r\n    state = {\r\n        product: {},\r\n    }\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const response = await api.get(`/products/${id}`);\r\n        console.log(response.data);\r\n        this.setState({ product: response.data });\r\n    }\r\n    render() {\r\n        const { product } = this.state;\r\n\r\n        return (\r\n            <div className=\"product-info\">\r\n                <h1>{product.title}</h1>\r\n                <p>{product.description}</p>\r\n                <p>\r\n                    URL: <a href={product.url}>{product.url}</a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Main from \"./pages/main\";\r\nimport Product from \"./pages/product\";\r\n\r\nconst Routes = () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Main} />\r\n            <Route path=\"/products/:id\" component={Product} />\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\n\r\nexport default Routes; ","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Header = () => <header id=\"main-header\">JS-React</header>\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport Routes from \"./routes\";\n\n\nimport \"./styles.css\"\nimport Header from \"./components/Header\";\nimport Main from \"./pages/main\";\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}